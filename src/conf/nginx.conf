
#user  nobody;
worker_processes  auto; # Usar "auto" para ajustar automaticamente o número de processos de trabalho com base no número de núcleos do processador

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  'Remote Addr: $http_x_real_ip, Time: [$time_local], Request: "$request" '
                     'Status: $status';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8080;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            # proxy_pass http://localhost:80;
        }

        location /service1 {
            proxy_pass http://localhost:8001/; 
            # A / garante que que a URL é mantida
            # Se não colocar a barra, o nginx irá redirecionar para http://localhost:8001service1
        }

        location /service2 {
            proxy_pass http://localhost:8002/;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
       listen       80;
       server_name  localhost;

       location / {
           root   C:/Git/nginx-I/src/server;
           index  index.html index.htm;
       }

       # For PHP files
       location ~ \.php$ { 
           proxy_pass   http://localhost:8000;
       }

       error_page 400 401 404 /404.html;
    }

    server {
       listen       8001;
       server_name  localhost;

       access_log  logs/service1.log main;

       location / {
           root   C:/Git/nginx-I/src/server/service1;
           index  index.html index.htm;
        #    health_check; # Disponível na versão comercial do Nginx a partir da versão 1.9.5
       }
    }

    server {
       listen       8002;
       server_name  localhost;

       access_log  logs/service2.log main;

       location / {
           root   C:/Git/nginx-I/src/server/service2;
           index  index.html index.htm;
       }
    }

    upstream services {
    #    server localhost:8001 weight=2; # O peso padrão é 1. Como o servidor secundário é backup, não faz sentido manter o peso
       server localhost:8001 fail_timeout=120; # O servidor principal tem um tempo limite de 120 segundos para reconectar
       server localhost:8002 backup; # O servidor backup só é usado se o servidor principal estiver indisponível
    }

    server {
       listen       8003;
       server_name  localhost;

       location / {
           proxy_pass http://services;
           proxy_set_header X-Real-IP $remote_addr;
       }
    }

    fastcgi_cache_path C:/Server/nginx/tmp/cache levels=1:2 keys_zone=fpm:10m; # Define o caminho do cache, os níveis de diretório e o tamanho da zona de cache

    server {
       listen       8004;
       root         /caminho/projeto;

       location / {
           include fastcgi.conf;
           fastcgi_pass localhost:9000;
           fastcgi_cache fpm; 
           fastcgi_cache_key "$request_method$request_uri"; # Define a chave de cache para identificar os recursos armazenados em cache
           fastcgi_cache_valid 1m; # Define o tempo de validade do cache para respostas padrões por 1 minuto
       }
    }

    server {
       listen       8005;
       root         C:/Git/nginx-II/src;
       index        index.html;
       gzip on; # Ativa a compressão gzip para reduzir o tamanho dos arquivos transferidos. Vai gerar o cabeçalho Content-Encoding no recurso
       gzip_types text/css; # Define os tipos de arquivos que serão comprimidos.
       add_header Keep-Alive "timeout=5, max=1000"; # Define o cabeçalho Keep-Alive para manter a conexão aberta por 5 segundos e permitir até 1000 requisições

       location ~ \.jpeg$ {
           expires 30d;  # Define o tempo de expiração para 30 dias. Vai gerar os cabeçalhos Expires e Cache-Control no recurso
           add_header Cache-Control public;  # Define o cabeçalho Cache-Control para recursos estáticos. Assim o navegador bem como intermediários podem armazenar em cache o recurso
       }
    }

    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
